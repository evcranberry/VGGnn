import streamlit as st

import requests
from io import BytesIO

from PIL import Image
import PIL
import torch
import torchvision
from torchvision import models, transforms
import io
import torch.nn as nn
import time


@st.cache_data
def convert_df(df):
    # IMPORTANT: Cache the conversion to prevent computation on every rerun
    return df.to_csv().encode("utf-8")


preprocess = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor()
]
)

idx = {0: '–í–∏—à–Ω—è',
       1: '–ö–æ—Ñ–µ–π–Ω–æ–µ –¥–µ—Ä–µ–≤–æ',
       2: '–û–≥—É—Ä–µ—Ü',
       3: '–õ–∏—Å–∏–π –æ—Ä–µ—Ö (–ú–∞–∫—Ö–∞–Ω–∞)',
       4: '–õ–∏–º–æ–Ω',
       5: '–û–ª–∏–≤–∫–æ–≤–æ–µ –¥–µ—Ä–µ–≤–æ',
       6: '–ñ–µ–º—á—É–∂–Ω–æ–µ –ø—Ä–æ—Å–æ (–ë–∞–¥–∂—Ä–∞)',
       7: '–¢–∞–±–∞–∫',
       8: '–ú–∏–Ω–¥–∞–ª—å',
       9: '–ë–∞–Ω–∞–Ω',
       10: '–ö–∞—Ä–¥–∞–º–æ–Ω',
       11: '–ß–∏–ª–∏',
       12: '–ì–≤–æ–∑–¥–∏–∫–∞',
       13: '–ö–æ–∫–æ—Å',
       14: '–•–ª–æ–ø–æ–∫',
       15: '–ù—É—Ç',
       16: '–°–æ—Ä–≥–æ',
       17: '–î–∂—É—Ç',
       18: '–ö—É–∫—É—Ä—É–∑–∞',
       19: '–ì–æ—Ä—á–∏—Ü–∞',
       20: '–ü–∞–ø–∞–π—è',
       21: '–ê–Ω–∞–Ω–∞—Å',
       22: '–†–∏—Å',
       23: '–°–æ—è',
       24: '–°–∞—Ö–∞—Ä–Ω—ã–π —Ç—Ä–æ—Å—Ç–Ω–∏–∫',
       25: '–ü–æ–¥—Å–æ–ª–Ω–µ—á–Ω–∏–∫',
       26: '–ß–∞–π',
       27: '–ü–æ–º–∏–¥–æ—Ä',
       28: '–í–∏–≥–Ω–∞ –ª—É—á–∏—Å—Ç–∞—è (–ú–∞—à)',
       29: '–ü—à–µ–Ω–∏—Ü–∞'
       }

st.page_link('pages/–ê–≥—Ä–æ_–º–µ—Ç—Ä–∏–∫–∏_–º–æ–¥–µ–ª–∏.py', label='–£–∑–Ω–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏')

st.markdown('''
    ## :green[üåæ–°–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫—É–ª—å—Ç—É—Ä—ã]
    ##### :green[üñºÔ∏è–û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—É–ª—å—Ç—É—Ä—É –ø–æ —Ñ–æ—Ç–æ]
    ''')



st.logo('./images/icons/sunflower.jpg', icon_image='./images/icons/plant.jpg', size='large')

st.markdown('''
#### <- –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ —Å —Ä–∞—Å—Ç–µ–Ω–∏–µ–º –≤ –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å
''')


uploaded_files = st.sidebar.file_uploader(
    "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ", type=['png', 'jpg'], accept_multiple_files=True
)
url_file = st.sidebar.text_input("–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É",)
url_img = None
if url_file:
    try:
        url_img = Image.open(BytesIO(requests.get(url_file).content)).convert("RGB")
    except PIL.UnidentifiedImageError:
        st.sidebar.write("‚ùå–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞")
model = torchvision.models.resnet152()
model.fc = nn.Linear(in_features=2048, out_features=30, bias=True)
model.load_state_dict(torch.load('models/resnet152_agriculture.pt'))
model.eval()
if uploaded_files:
    image_tensors = []
    images = []
    if url_img:
        image_tensors.append(preprocess(url_img))
        images.append(url_img)

    for uploaded_file in uploaded_files:
        image = Image.open(uploaded_file).convert("RGB")
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_tensor = preprocess(image)
        # print(image_tensor.shape)
        images.append(image)
        image_tensors.append(image_tensor)

    # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ–Ω–∑–æ—Ä–æ–≤ –≤ –æ–¥–∏–Ω –±–∞—Ç—á
    input_batch = torch.stack(image_tensors)
    # print(input_batch.shape)
    # –ü–µ—Ä–µ–¥–∞—á–∞ –±–∞—Ç—á–∞ –≤ –º–æ–¥–µ–ª—å

    start_time = time.time()
    with torch.no_grad():
        output = model(input_batch)
    end_time = time.time()

    elapsed_time = end_time - start_time
    st.write(f"‚è≥–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed_time:.4f} —Å–µ–∫—É–Ω–¥")
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
    _, predicted_idxs = torch.max(output, 1)
    for i, uploaded_file in enumerate(images):
        st.image(images[i], use_container_width=True)
        st.markdown(
            f"""
            <div style="text-align: center; font-size: 24px; font-family: sans-serif;">
                <p>–≠—Ç–æ {idx[predicted_idxs[i].item()]}</p>
            </div>
            """,
            unsafe_allow_html=True
        )


if 'show_text' not in st.session_state:
    st.session_state.show_text = False

if st.sidebar.button("–ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞"):
    st.session_state.show_text = not st.session_state.show_text

if st.session_state.show_text:
    st.sidebar.markdown('''
    * üå∫ Masha
    * üåº Nanzat
    ''')


st.sidebar.link_button("–ù–∞—à Github", "https://github.com/evcranberry/VGGnn")
